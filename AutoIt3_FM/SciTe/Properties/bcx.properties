# Define SciTE settings for BCX files.

# BAS: Module, FRM: Form, CLS: Class Module, CTL: User Control
# PAG: Property Page, DSR: Data Report, DOB: User Document
file.patterns.bcx=*.bcx
BCXdir=C:\Program Files (x86)\BCX

lexer.$(file.patterns.bcx)=vb
word.characters.$(file.patterns.bcx)=$(chars.alpha)$(chars.numeric).$_@#%!

# note we have no real "build"; rather "execute and capture
# compiletime and runtime errors"

xcommand.build.$(file.patterns.bcx)="$(BCXdir)\Bin\MainBatch.bat" MS CON "$(FileName)"
xcommand.build.$(file.patterns.bcx)="$(BCXdir)\Bin\lccexe.bat" "$(FileName)"
Xcommand.build.$(file.patterns.bcx)="$(BCXdir)\Bin\PELLESC.BAT" CON UPX "$(FileName)"
command.build.$(file.patterns.bcx)="$(BCXdir)\Bin\BCXWRAPPER.EXE" "$(FilePath)"
command.build.subsystem.$(file.patterns.bcx)=0
command.compile.$(file.patterns.bcx)="$(BCXdir)\Bin\PELLESC.BAT" gui UPX "$(FileName)"
command.compile.subsystem.$(file.patterns.bcx)=0
command.go.$(file.patterns.bcx)="$(FileName)"
command.go.subsystem.$(file.patterns.bcx)=2

command.help.$(file.patterns.bcx)=$(CurrentWord)!$(BCXdir)\Bin\Bcxhelp.Chm
command.help.subsystem.$(file.patterns.bcx)=4


# Keywords, operators, statements, data types and some words in .frm files
keywordclass.bcx=\
accelerator asm bcx bcx_resource bcxversion catch ccode class comment \
compiler cpp dll endclass endtry file fsstatic genfree header hscroll \
ifndef include iprint_off iprint_off iprint_on lcc leanandmean library \
linker namespace noini nolibmain nolibrary nomain nowin onentry onexit \
optimizeroff optimizeron pack pelles pp prj prjuse project resource \
source test trace try turbo typedef vscroll abs acos acosh alias and \
ansitowide appactivate append appexename appexepath argc argv argv as \
asc ascending asin asinh atanh atn auto band bcx_arc bcx_bitmap \
bcx_blackrect bcx_bmpbutton bcx_bmpheight bcx_bmpwidth bcx_button \
bcx_checkbox bcx_circle bcx_colordlg bcx_combobox bcx_control \
bcx_cursor bcx_datepick bcx_dialog bcx_mdialog bcx_edit bcx_ellipse \
bcx_floodfill bcx_fontdlg bcx_form bcx_get bcx_get_text bcx_get_updown \
bcx_getpixel bcx_grayrect bcx_group bcx_hinstance bcx_icon bcx_input \
bcx_label bcx_line bcx_lineto bcx_listbox bcx_listview bcx_loadbmp \
bcx_loadimage bcx_mdichild bcx_mdiclass bcx_mdiclient bcx_olepicture \
bcx_polybezier bcx_polygon bcx_polyline bcx_preset bcx_print \
bcx_progressbar bcx_pset bcx_put bcx_radio bcx_rectangle bcx_repeat \
bcx_resource bcx_richedit bcx_roundrect bcx_scalex bcx_scaley \
bcx_set_edit_color bcx_set_font bcx_set_form_color bcx_set_label_color \
bcx_set_text bcx_slider bcx_splitter bcx_status bcx_str bcx_tab \
bcx_thread bcx_threadend bcx_threadkill bcx_threadresume \
bcx_threadsuspend bcx_threadwait bcx_tile bcx_toolbar bcx_treeview \
bcx_updown bcx_whiterect bcxlib bcxpath begin bel bff bin bin2dec \
binary bnot bool bor bs byref c_declare call callback case cbctl \
cbctlmsg cbhndl cbhwnd cblparam cbmsg cbool cbwparam cdbl center chdir \
chdrive chr cint clear clng close cls color color_bg color_fg \
comboboxloadfile command concat console const containedin copyfile cos \
cosh cosl cr createregint createregstring crlf csng csrlin curdir \
cursorx cursory cvd cvi cvl cvs data date declare decr del delay \
delete deleteregkey descending dim do doevents download dq \
drawtransbmp dsplit dynamic editloadfile ejectpage else elseif enc end \
endif enum environ eof esc events exist exit exp export extern extract \
ff filelocked fillarray findfirst findfirstinstance findnext finput \
fix flush for fprint frac free freefile freeglobals function fwrite \
genfree get getattr getbmp getbvalue getc getdrive getfilename \
getgvalue getrvalue global gosub goto gui hex hex2dec hide hypot icon \
if iif imod in inchr include incr infobox inkey inkey inp input \
inputbox inputbuffer inputnumber inpw ins instat instr instrrev int \
iremove iremove ireplace ireplace is isptr iterate join keypress kill \
lcase lccpath left len lf lib like line listboxloadfile load_dll \
loadfile loadlibrary loc local locate lof log log10 loop lpad lprint \
ltrim max mcase mdigui mid min mkd mkdir mki mkl mks mod modstyle \
msgbox new next not now nul oct on open optional or osversion outp \
output outpw overloaded panel pause peek pellespath pixels playwav \
poke pos pow powl preserve print printer private program ptr put \
qbcolor qsort qsortidx randomize raw rec reccount reclen record redim \
regint register regstring rem remain remove rename repeat replace \
retain return reverse rewind rgb right rmdir rnd round rpad rtrim run \
savebmp scanerror screen searchpath seek select set set_bcx_bitmap \
set_bcx_bmpbutton set_bcx_icon setattr setformcolor setwindowrtftext \
sgn shared shell show sin sinh sinl sizeof sound space spc split \
sprint sqr sqrt sqrtl static stdcall step str strarray strim string \
strptr strtoken sub swap sysdir tab tally tan tanh tanl tempdir \
tempfilename textmode then this time timer to trim type ubound ucase \
union until using val vbs_addcode vbs_eval_num vbs_eval_str vbs_reset \
vbs_run_script vbs_start vbs_stop vchr verify vt wend while widetoansi \
windir with write xor

# html.properties picks up VB keywords from keywordclass.vb
keywords.$(file.patterns.bcx)=$(keywordclass.bcx)

comment.block.bcx='~
# VB styles

# Default
style.vb.32=$(font.base)
# White space
style.vb.0=
# Comment
style.vb.1=$(colour.code.comment.line),$(font.code.comment.line)
# Number
style.vb.2=$(colour.number)
# Keyword
style.vb.3=$(colour.keyword)
# String
style.vb.4=$(colour.string)
# Preprocessor (directives)
style.vb.5=$(colour.preproc)
# Operator
style.vb.6=$(colour.operator)
# Identifier
style.vb.7=
# Date
style.vb.8=$(colour.number)
# End of line where string is not closed
style.vb.9=$(style.stringeol)
# Other keywords (bozo test colors :-)
style.vb.10=$(style.vb.5),back:#D0FFD0
style.vb.11=$(style.vb.5),back:#D0D0FF
style.vb.12=$(style.vb.5),back:#FFD0D0

# VBScript styles same as VB styles
style.vbscript.0=$(style.vb.0)
style.vbscript.1=$(style.vb.1)
style.vbscript.2=$(style.vb.2)
style.vbscript.3=$(style.vb.3)
style.vbscript.4=$(style.vb.4)
style.vbscript.5=$(style.vb.5)
style.vbscript.6=$(style.vb.6)
style.vbscript.7=$(style.vb.7)
style.vbscript.8=$(style.vb.8)
style.vbscript.9=$(style.vb.9)
style.vbscript.10=$(style.vb.10)
style.vbscript.11=$(style.vb.11)
style.vbscript.12=$(style.vb.12)

# wscript
# normal execute

